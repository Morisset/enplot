#!/usr/bin/env python
"""
enplot: A plot tool for quickly plotting data in TSV,SSV,CSV formats from the command line.

Requires:

   1) python
   2) SciPy
   3) matplotlib (pylab)

Purpose:

   To quickly plot a data file from the command line for general inspection.

Robert Johansson <robert@riken.jp>
License: LGPL
"""

# import scipy
import enplot

#
# Configure and parse the command-line arguments
#
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("datafile",
                    help="a data file in a CSV-like format",
                    type=str, nargs='+')
parser.add_argument("-t", "--title",
                    help="plot title", type=str)
parser.add_argument("-o", "--output-file",
                    help="file name for output", type=str)
parser.add_argument("-f", "--output-format",
                    help="file format for output", type=str)
parser.add_argument("-x",
                    help="column index in the data file for use as X variable",
                    type=str)
parser.add_argument("-y",
                    help=("comma-separated list of column index in " +
                          "the data file for use as Y variables"), type=str)
parser.add_argument("-X", "--x-label", 
                    help="label for use on X axis", type=str)
parser.add_argument("-Y", "--y-label", 
                    help="label for use on Y axis", type=str)
parser.add_argument("-l", "--legends",
                    help="comma-separated list of legends", type=str)
parser.add_argument("-s", "--sort",
                    help="sort the data by the X-axis data points",
                    action='store_false')
parser.add_argument("-q", "--quiet", help="do not display plot window",
                    action='store_true', default=False)
parser.add_argument("-d", "--debug", help="activate debug printouts",
                    action='store_true', default=False)
args = parser.parse_args()

#
# process command-line arguemnts
#
style = ["-b", "-g", "-k", "-r"]
style_no = len(style)

xcol = int(args.x) if args.x else -1
ycol = [int(y) for y in args.y.split(",")] if args.y else [0]

#
# Use matplotlib to create the plot
#

import matplotlib
matplotlib.rcParams['font.size'] = 12
matplotlib.rcParams['font.family'] = 'serif'
matplotlib.rcParams['text.usetex'] = True
import pylab as plt

fig, axes = plt.subplots(1, 1, figsize=(8, 6))

#
# Read and process the data from a files.
#
si = 0
for data_file in args.datafile:

    if args.debug:
        print "Processing data file ", data_file

    M, m, n = enplot.file_data_read(data_file)

    if args.sort:
        M = enplot.data_matrix_sort(M, xcol)

    for i in ycol:
        if i < n:
            if xcol != -1:
                axes.plot(M[:, xcol], M[:, int(i)], style[si % style_no])
            else:
                axes.plot(M[:, int(i)], style[si % style_no])
            si = si + 1
        else:
            print "The data file", data_file, ": column", i, "does not exist.", n

#
# Add plot title, labels and legend
#
if args.title and len(args.title) > 0:
    axes.set_title(args.title)

if args.x_label and len(args.x_label) > 0:
    axes.set_xlabel(args.x_label)

if args.y_label and len(args.y_label) > 0:
    axes.set_ylabel(args.y_label)

if args.legends and len(args.legends) > 0:
    axes.legend(args.legends.split(","))

#
# save and/or display figure
#
if args.output_file and len(args.output_file):
    fig.savefig(args.output_file)

if not args.quiet:
    plt.show()
