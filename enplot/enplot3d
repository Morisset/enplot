#!/usr/bin/env python
"""
enplot: A plot tool for quickly plotting 3D data in TSV,SSV,CSV formats from
the command line.

Requires:

   1) python
   2) SciPy
   3) matplotlib (pylab)

Purpose:

   To quickly plot a data file from the command line for general inspection.

Robert Johansson <robert@riken.jp>
License: LGPL
"""

from scipy import *
from pylab import *
import numpy as np

from matplotlib import pyplot, mpl,cm
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import rcParams

import os
import copy
import getopt
import sys

from enplot import *

def usage():
    print "enplot3d [-v view] [-t title] [-p plot.png] [-x xcol] [-y ycol] [-z zcol_list] [-X x_label] [-Y y_label] [-Z z_label] [-d dim] data_files"
    print
    print " zcol_list:    is a comma separated list of integers which indicate which columns to plot on the z axis"
    print " data_files:   is a blank space separated list of data files to plot"
    print
    print "Additional options:"
    print
#    print " -d D        using data file delimiter D (i.e., space or \t)"
#    print " -S sep        using data file separator sep (values 'space' or 'tab')
    print " -s        sort the data point by the x-axis"
    return

try:     
    opts, args = getopt.getopt(sys.argv[1:], "hbd:p:x:y:z:Z:X:Y:t:DsS:qv:", ["help", "debug", "dim=", "plot=", "xcol=", "ycol=", "zcol=", "zlbl=", "xlbl=","ylbl=", "title=", "dots", "sort", "scale", "quiet", "view"]) 

except getopt.GetoptError:     
    usage()  
    sys.exit(2)                     

# Defaults
plot_file = ""
plot_view = "3d"
data_files = 0 
xcol  = -1
ycol  = -1
zcols = [1]
xlbl = "x"
ylbl = "y"
zlbl = "y"
yscale = 1
debug = 1
dim = "\t"
title_text = ""
style = ("-b", "-g", "-k", "-r")
style_no = 4
sort_flag = 0 
quiet = 0

# parse command line arguments
for opt, arg in opts:                
    if opt in ("-h", "--help"):      
        usage()                     
        sys.exit()                  
    elif opt in ("-p", "--plot"): 
        plot_file = arg   
    elif opt in ("-x", "--xcol"): 
        xcol  = int(arg)     
    elif opt in ("-y", "--ycol"): 
        ycol  = int(arg)
    elif opt in ("-z", "--zcol"): 
        zcols = arg.split(",")
    elif opt in ("-Z", "--zlbl"): 
        zlbl = arg     
    elif opt in ("-X", "--xlbl"): 
        xlbl = arg     
    elif opt in ("-Y", "--ylbl"): 
        ylbl = arg     
    elif opt in ("-Z", "--zlbl"): 
        zlbl = arg     
    elif opt in ("-d", "--dim"): 
        dim = arg 
    elif opt in ("-t", "--title"): 
        title_text = arg     
    elif opt in ("-S", "--separator"):
        if arg == "space":
            dim = " "
        elif arg == "tab":
            dim = "\t"
    elif opt in ("-D", "--dots"): 
        style = (".r", ".b", ".g", ".k")
    elif opt in ("-s", "--sort"): 
        sort_flag = 1
    elif opt in ("-d", "--debug"): 
        debug = 1
    elif opt in ("-q", "--quiet"):
        quiet = 1
    elif opt in ("-v", "--view"):
        plot_view = arg     


data_files = args

if len(data_files) < 1:
    usage()
    sys.exit()

if debug != 0:
    print "Plot data in", data_files, "and store in", plot_file
    print " - plot column", zcols, "vs columns X",xcol,"and Y",ycol

#
#
#

params = {'backend':        'ps',
          'axes.labelsize':  18,
          'text.fontsize':   18,
          'legend.fontsize': 18,
          'xtick.labelsize': 18,
          'ytick.labelsize': 18,
          'text.usetex':     True}
#          'figure.figsize': fig_size}
rcParams.update(params)

#for data_file in data_files:
data_file = data_files[0]

fig = figure(1, figsize=(12.0,6.0))
nfigs = len(zcols)
fig_cols = ceil(nfigs/sqrt(nfigs))
fig_rows = ceil(nfigs/fig_cols)

fig_idx = 1

#M, n, m = read_matrix_file(data_file, dim)
M, m, n = file_data_read(data_file)

if sort_flag == 1:
    M = matrix_sort(M, xcol)

x_range = np.sort(np.unique(M[:,xcol]))
y_range = np.sort(np.unique(M[:,ycol]))

X, Y = np.meshgrid(x_range, y_range)

for zcol in zcols:

    if debug != 0:
        print "Processing z column", zcol, "data file ", data_file

    Z = build_Z(M, x_range, y_range, xcol, ycol, zcol)

    if debug != 0:
        print "Setup plots"


    if plot_view == "3d":
        ax = fig.add_subplot(fig_rows, fig_cols, fig_idx, projection='3d') #/,azim=-90, elev=-90)
        surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.jet, linewidth=0, antialiased=False)
        #surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, facecolors=cm.jet, linewidth=0, antialiased=True)
 
    else:
        ax = fig.add_subplot(fig_rows, fig_cols, fig_idx)
        #subplot(fig_rows, fig_cols, fig_idx)
        #set_cmap('hot')
        c = ax.pcolor(X, Y, Z, antialiased=False)
	    #cax = ax.imshow(Z, interpolation='gaussian', aspect='equal', extent=[min(X[0,:]),max(X[0,:]),min(Y[:,0]),max(Y[:,0])])
        #pcolor(X, Y, Z, antialiased=True)
        #cbar = colorbar(ax)

        #pcolor(X, Y, N_vec, cmap=get_cmap('PuBu'))
        #cbar = colorbar(c,ax=ax)
        #cbar.set_clabel("$"+zlbl+"$")

    ax.autoscale(tight=True)

    if len(title_text) > 0:
        ax.title("$"+title_text+"$")

    if len(xlbl) > 0:
        ax.set_xlabel("$"+xlbl+"$")
    else:
        ax.set_xlabel("$x$")
    
    if len(ylbl) > 0:
        ax.set_ylabel("$"+ylbl+"$")
    else:
        ax.set_ylabel("$y$")

    fig_idx = fig_idx + 1

if debug != 0:
    print "Show plots"

#plt.colorbar()
show()

if len(plot_file) > 0:
    savefig(plot_file)

if debug != 0:
    print "done"



